# `sheldon` configuration file
# ----------------------------
#
# You can modify this file directly or you can use one of the following
# `sheldon` commands which are provided to assist in editing the config file:
#
# - `sheldon add` to add a new plugin to the config file
# - `sheldon edit` to open up the config file in the default editor
# - `sheldon remove` to remove a plugin from the config file
#
# See the documentation for more https://github.com/rossmacarthur/sheldon#readme

shell = "zsh"

[templates]
defer = "{{ hooks?.pre | nl }}{% for file in files %}zsh-defer source \"{{ file }}\"\n{% endfor %}{{ hooks?.post | nl }}"

[plugins]

[plugins.prompt]
local = "~/.config/zsh/instant-prompt"

# IMPORTANT: the zsh-defer plugin definition should be placed before any plugins
# that will use the defer template. Sheldon always processes plugins in the order
# they are defined in the config file.
[plugins.zsh-defer]
github = "romkatv/zsh-defer"

[plugins.evalcache]
github = "mroth/evalcache"

[plugins.utils]
local = "~/.config/zsh/utils"

[plugins.compinit]
inline = 'autoload -Uz compinit && zsh-defer compinit'

[plugins.colors]
inline = 'autoload -Uz colors && zsh-defer colors'

[plugins.git-prompt]
apply  = ["defer"]
branch = "main"
github = "lttb/git-prompt.zsh"
use    = ["git-prompt.zsh"]
[plugins.git-prompt.hooks]
pre = '''
ZSH_GIT_PROMPT_NO_PROMPT=1
'''

[plugins.oh-my-zsh]
apply  = ["defer"]
github = "ohmyzsh/ohmyzsh"
use    = ["lib/history.zsh"]

[plugins.zsh-autosuggestions]
apply  = ["defer"]
github = "zsh-users/zsh-autosuggestions"
[plugins.zsh-autosuggestions.hooks]
post = '''
ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE='fg=242'
'''

[plugins.zsh-syntax-highlighting]
apply  = ["defer"]
github = "zsh-users/zsh-syntax-highlighting"

[plugins.zsh-history-substring-search]
apply  = ["defer"]
github = "zsh-users/zsh-history-substring-search"
[plugins.zsh-history-substring-search.hooks]
post = '''
HISTORY_IGNORE="*'z#*'"

HISTORY_SUBSTRING_SEARCH_ENSURE_UNIQUE=1
HISTORY_SUBSTRING_SEARCH_HIGHLIGHT_FOUND='fg=102,bold'
HISTORY_SUBSTRING_SEARCH_HIGHLIGHT_NOT_FOUND='fg=red,bold'

# Bind ^[[A/^[[B manually so up/down works both before and after zle-line-init
bindkey '^[[A' history-substring-search-up
bindkey '^[[B' history-substring-search-down
bindkey '^P' history-substring-search-up
bindkey '^N' history-substring-search-down
bindkey -M vicmd 'k' history-substring-search-up
bindkey -M vicmd 'j' history-substring-search-down
'''

[plugins.zsh-edit]
apply  = ["defer"]
github = "lttb/zsh-edit"

[plugins.fzf-tab]
apply  = ["defer"]
github = "Aloxaf/fzf-tab"

[plugins.zoxide]
apply  = ["defer"]
github = "ajeetdsouza/zoxide"
[plugins.zoxide.hooks]
post = 'zsh-defer _evalcache zoxide init --cmd j zsh'

[plugins.fzf]
inline = 'zsh-defer _evalcache fzf --zsh'

[plugins.fnm]
inline = 'zsh-defer _evalcache fnm env --use-on-cd --log-level=quiet'

[plugins.broot]
inline = 'zsh-defer _evalcache broot --print-shell-function zsh'
[plugins.broot_kitty]
inline = '''
if [[ -n "${KITTY_WINDOW_ID+1}" ]]; then
  function br_detached {
    local cmd_file=$(mktemp)

    # Launch broot in a new split window and capture its raw output as the window ID
    local broot_window_id=$(kitty @ launch --allow-remote-control --cwd=current --location=hsplit broot --outcmd "$cmd_file" "$@")

    # Wait for the broot window to close
    while kitty @ ls --match id:"$broot_window_id" >/dev/null 2>&1; do
      sleep 0.1
    done

    # Check if broot wrote a command to the file
    if [[ -s "$cmd_file" ]]; then
      cmd=$(<"$cmd_file")
      rm -f "$cmd_file"
      # Execute the command directly in this shell
      BUFFER="$cmd"
      zle accept-line
    else
      rm -f "$cmd_file"
    fi
  }

  zle -N br_widget br_detached
  bindkey "^F" br_widget
fi
'''

[plugins.vim]
inline = '''
bindkey -v

# Yank to the system clipboard
function vi-yank-xclip {
  zle vi-yank
  echo "$CUTBUFFER" | pbcopy -i
}

zle -N vi-yank-xclip
bindkey -M vicmd 'y' vi-yank-xclip
'''

# @see "trapd00r/LS_COLORS"
[plugins.vivid]
inline = '''
function get_ls_colors() {
  echo "export LS_COLORS=\"$(vivid generate nord)\""
}

zsh-defer _evalcache get_ls_colors
'''
